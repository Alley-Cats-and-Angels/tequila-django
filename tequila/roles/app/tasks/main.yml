---
- name: add the deadsnakes ppa
  apt_repository: repo="ppa:fkrull/deadsnakes" state=present

- name: install app packages
  apt: pkg={{ item }} state=present update_cache=yes cache_valid_time=3600
  with_items:
    - python-pip
    - libpq-dev
    - libev-dev
    - libevent-dev
    - libmemcached-dev
    - libjpeg8
    - libjpeg8-dev
    - libfreetype6
    - libfreetype6-dev
    - zlib1g
    - zlib1g-dev
    - libxml2-dev
    - libxslt1-dev
    - ghostscript
    - libpython{{ python_version }}
    - libpython{{ python_version }}-dev
    - python{{ python_version }}
    - python{{ python_version }}-dev
    - postfix
    - git-core
    - python-virtualenv

- name: ensure postfix is running
  service: name=postfix state=started

- name: remove supervisor system package
  apt: pkg=supervisor state=absent

# pip install to obtain a consistent version number
- name: pip install supervisor
  pip: name=supervisor version=3.0

- name: upload supervisor init script
  copy: src=service.sh
        dest=/etc/init.d/supervisor
        owner=root
        group=root
        mode=744

- name: upload supervisor config file
  copy: src=supervisord.conf
        dest=/etc/supervisor/supervisord.conf
        owner=root
        group=root
        mode=644
  notify:
    - reload supervisor

- name: create directory paths for supervisor
  file: path={{ item }}
        state=directory
        owner=root
        group=root
        mode=744
  with_items:
    - /var/log/supervisor
    - /etc/supervisor/conf.d

- name: symlink supervisor config to official location
  file: src=/etc/supervisor/supervisord.conf
        dest=/etc/supervisord.conf
        state=link
  notify:
    - reload supervisor

- name: ensure supervisor is running
  service: name=supervisor state=started

- name: upload github key
  copy: content={{ github_deploy_key }}
        dest={{ ssh_dir }}/github
        owner={{ project_name }}
        group={{ project_name }}
        mode=600
  register: github_key
  when: github_deploy_key is defined

# TODO: come up with a safer way of exposing the local repo
# - name: rsync project source to /vagrant/
#   synchronize: >-
#     src={{ source_dir }}
#     dest=/vagrant/
#     recursive=yes
#     delete=yes
#   when: env_name == 'local'

- name: checkout latest project source
  git: repo={{ repo.url }}
       dest={{ source_dir }}
       version={{ repo.branch|default('master') }}
       force=yes
       key_file={{ github_key.dest|default(None) }}
  become_user: "{{ project_name }}"
  when: env_name != 'local'

- name: delete pyc files
  shell: find . -name '*.pyc' -delete
  args:
    chdir: "{{ source_dir }}"
  become_user: "{{ project_name }}"

- name: pip install the project requirements
  pip: requirements={{ source_dir }}/requirements/{{ requirements_name[env_name]|default('production') }}.txt
       virtualenv={{ venv_dir }}
       virtualenv_python=/usr/bin/python{{ python_version }}
  become_user: "{{ project_name }}"

#- name: set up the project python path
#  copy: content="{{ source_dir }}"
#        dest={{ venv_dir }}/lib/python{{ python_version }}/site-packages/project.pth
#        user={{ project_name }}
#        group={{ project_name }}
#  become_user: "{{ project_name }}"

- name: create/update .env file
  template: >
    dest={{ source_dir }}/.env
    owner={{ project_name }}
    group={{ project_name }}
    mode=400
    src=envfile.j2

- name: make manage.py executable (because django_manage expects it)
  file: >
    path={{ source_dir }}/manage.py
    mode=0755
  become_user: "{{ project_name }}"

- name: collectstatic
  django_manage: >
    command=collectstatic
    app_path={{ source_dir }}
    virtualenv={{ venv_dir }}
  become_user: "{{ project_name }}"

# These only work if the database is local
# Otherwise, the user and db will have to be created manually
- name: create the project postgres user
  postgresql_user: name="{{ db_user }}"
                   role_attr_flags=NOCREATEDB,NOCREATEROLE,NOSUPERUSER
                   password="{{ db_password }}"
                   encrypted=yes
  become_user: postgres
  when: db_host == 'localhost'

- name: create the project database
  postgresql_db: name="{{ db_name }}"
                 owner="{{ db_user }}"
                 state=present
                 encoding='UTF-8'
                 lc_collate='en_US.UTF-8'
                 lc_ctype='en_US.UTF-8'
                 template='template0'
  become_user: postgres
  when: db_host == 'localhost'

- name: migrate
  django_manage: >
    command=migrate
    app_path={{ source_dir }}
    virtualenv={{ venv_dir }}
  become_user: "{{ project_name }}"
