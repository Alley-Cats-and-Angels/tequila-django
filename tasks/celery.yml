---
- name: configure celery
  template:
    src: celery.conf
    dest: /etc/supervisor/conf.d/{{ project_name }}-celery-default.conf
    owner: root
    group: root
    mode: 0600
  when: is_worker
  vars:
    name: "default"
    command: "worker"
    flags: "{{ celery_worker_extra_args|default('--loglevel=INFO') }}{% if celery_events %} --events{% endif %}"

- name: configure celery beat
  template:
    src: celery.conf
    dest: /etc/supervisor/conf.d/{{ project_name }}-celery-beat.conf
    owner: root
    group: root
    mode: 0600
  when: is_celery_beat
  vars:
    name: "beat"
    command: "beat"
    flags: "--schedule={{ root_dir }}/celerybeat-schedule.db --pidfile=/var/run/celery/celerybeat.pid --loglevel=INFO"

- name: configure celery events
  template:
    src: celery.conf
    dest: /etc/supervisor/conf.d/{{ project_name }}-celery-events.conf
    owner: root
    group: root
    mode: 0600
  when: celery_events
  vars:
    name: "events"
    command: "events"
    flags: "--camera {{ celery_camera_class }} --pidfile /var/run/celery/celery-events.pid --loglevel=INFO"

# Celery PIDs are stored in a directory in /var/run/celery (a tmpfs mount) so
# that no stale celery PID files can exist across reboots.
#
# A systemd-tmpfiles setting is set up here so that /var/run/celery is created at
# boot time with permissions allowing the project_user user to store their PIDs
# there.
- name: install celery tmpfile.d pid directory setting
  template:
    src: celery_tmpfile.conf
    dest: /etc/tmpfiles.d/celery.conf
    owner: root
    group: root
    mode: 0600
  register: celery_tmpfile

- name: create tmpfiles.d directories
  command: systemd-tmpfiles --create
  when: celery_tmpfile is changed

- name: ensure celery events is present and restart
  supervisorctl:
    name: "{{ project_name }}-celery-events"
    state: "{{ item }}"
  when: celery_events
  with_items:
    - present
    - restarted

- name: ensure celery beat is present and restart
  supervisorctl:
    name: "{{ project_name }}-celery-beat"
    state: "{{ item }}"
  when: is_celery_beat
  with_items:
    - present
    - restarted

- name: ensure celery is present and restart
  supervisorctl:
    name: "{{ project_name }}-celery-default"
    state: "{{ item }}"
  when: is_worker
  with_items:
    - present
    - restarted
