---
- name: configure celery for project {{ project_name }}
  template: src=celery.conf
            dest=/etc/supervisor/conf.d/{{ project_name }}-celery-{{ name }}.conf
            owner=root
            group=root
            mode=0600
  vars:
    name: "default"
    command: "worker"
    flags: "{{ celery_worker_extra_args|default('--loglevel=INFO') }}{% if celery_events %} --events{% endif %}"

- name: configure celery beat for project {{ project_name }}
  template: src=celery.conf
            dest=/etc/supervisor/conf.d/{{ project_name }}-celery-{{ name }}.conf
            owner=root
            group=root
            mode=0600
  vars:
    name: "beat"
    command: "beat"
    flags: "--schedule={{ root_dir }}/celerybeat-schedule.db --pidfile=/var/run/celery/celerybeat.pid --loglevel=INFO"

- name: configure celery events for project {{ project_name }}
  template: src=celery.conf
            dest=/etc/supervisor/conf.d/{{ project_name }}-celery-events.conf
            owner=root
            group=root
            mode=0600
  when: celery_events
  vars:
    name: "events"
    command: "events"
    flags: "--camera {{ celery_camera_class }} --pidfile /var/run/celery/celery-events.pid --loglevel=INFO"

# Celery PIDs are stored in a directory in /var/run/celery (a tmpfs mount) so
# that no stale celery PID files can exist across reboots.
#
# A systemd-tmpfiles setting is set up here so that /var/run/celery is created at
# boot time with permissions allowing the project_name user to store their PIDs
# there.
- when: not subproject
  block:
  - name: install celery tmpfile.d pid directory setting on server
    template: src=celery_tmpfile.conf
              dest=/etc/tmpfiles.d/celery.conf
              owner=root
              group=root
              mode=0600
    register: celery_tmpfile

  - name: create tmpfiles.d directories
    command: systemd-tmpfiles --create
    when: celery_tmpfile|changed

- name: ensure celery is present for project {{ project_name }}
  supervisorctl: name={{ project_name }}-celery-{{ item }} state=present
  with_items:
    - default
    - beat

- name: restart celery for project {{ project_name }}
  supervisorctl: name={{ project_name }}-celery-{{ item }} state=restarted
  with_items:
    - default
    - beat
