---
- name: halt if gunicorn_version is set
  assert:
    that: gunicorn_version is not defined
    fail_msg: "gunicorn_version is no longer supported. Remove it from your Ansible variables and instead pin `gunicorn==x.y` in your project's requirements"

- name: ensure that gunicorn is present in the virtualenv
  command: "{{ venv_dir }}/bin/pip show gunicorn"
  become_user: "{{ project_user }}"
  ignore_errors: True
  register: result

- name: warn if gunicorn is not installed
  fail:
    msg: please specify gunicorn in your project's requirements file
  when: result is failed

- name: configure gunicorn
  template:
    src: gunicorn.conf
    dest: /etc/supervisor/conf.d/{{ project_name }}-gunicorn.conf
    owner: root
    group: root
    mode: 0600

- name: ensure gunicorn is present
  supervisorctl:
    name: "{{ project_name }}-server"
    state: present

# TODO: let connections to the {{ project_port }} through the firewall if we are load-balancing.

# Use manage.sh so we use the same env vars from .env that we use on
# other invocations of django manage.py. Unfortunately that means we cannot
# use the ansible django_manage module.
# TODO: see if we could use an ansible lookup plugin to read the .env file
# and pass the values to the environment configuration item?
- name: migrate
  shell: "{{ root_dir }}/manage.sh migrate --noinput -v 0"
  args:
    chdir: "{{ django_dir }}"
  become_user: "{{ project_user }}"
  run_once: true
  vars:
    ansible_ssh_pipelining: true

- name: restart gunicorn
  supervisorctl:
    name: "{{ project_name }}-server"
    state: restarted
  # If your program isn't running, telling supervisorctl to restart
  # it is an error. I would think that the Ansible module would
  # handle that, since they're supposed to be idempotent.
  # For now, just ignore errors:
  ignore_errors: true
