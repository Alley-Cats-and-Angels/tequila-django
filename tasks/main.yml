---
- name: add the deadsnakes ppa
  apt_repository: repo="ppa:fkrull/deadsnakes" state=present

- name: install app packages
  apt: pkg={{ item }} state=present update_cache=yes cache_valid_time=3600
  with_items:
    - python-pip
    - libpq-dev
    - libev-dev
    - libevent-dev
    - libmemcached-dev
    - libjpeg8
    - libjpeg8-dev
    - libfreetype6
    - libfreetype6-dev
    - zlib1g
    - zlib1g-dev
    - libxml2-dev
    - libxslt1-dev
    - ghostscript
    - libpython{{ python_version }}
    - libpython{{ python_version }}-dev
    - python{{ python_version }}
    - python{{ python_version }}-dev
    - postfix
    - git-core
    - python-virtualenv

- name: ensure postfix is running
  service: name=postfix state=started

- name: remove supervisor system package
  apt: pkg=supervisor state=absent

# pip install to obtain a consistent version number
- name: pip install supervisor
  pip: name=supervisor version=3.0

- name: upload supervisor init script
  copy: src=service.sh
        dest=/etc/init.d/supervisor
        owner=root
        group=root
        mode=744

- name: create directory paths for supervisor
  file: path={{ item }}
        state=directory
        owner=root
        group=root
        mode=744
  with_items:
    - /var/log/supervisor
    - /etc/supervisor/conf.d

- name: upload supervisor config file
  copy: src=supervisord.conf
        dest=/etc/supervisor/supervisord.conf
        owner=root
        group=root
        mode=644
  notify:
    - reload supervisor

- name: symlink supervisor config to official location
  file: src=/etc/supervisor/supervisord.conf
        dest=/etc/supervisord.conf
        state=link
  notify:
    - reload supervisor

- name: ensure supervisor is running
  service: name=supervisor state=started

- name: upload github key
  copy: content={{ github_deploy_key }}
        dest={{ ssh_dir }}/github
        owner={{ project_user }}
        group={{ project_user }}
        mode=600
  register: github_key
  when: github_deploy_key is defined

# TODO: come up with a safer way of exposing the local repo
# - name: rsync project source to /vagrant/
#   synchronize: >-
#     src={{ source_dir }}
#     dest=/vagrant/
#     recursive=yes
#     delete=yes
#   when: env_name == 'local'

- name: checkout latest project source
  git: repo={{ repo.url }}
       dest={{ source_dir }}
       version={{ repo.branch|default('master') }}
       force=yes
       key_file={{ github_key.dest|default(None) }}
  become_user: "{{ project_user }}"
  when: env_name != 'local' and not source_is_local

# NB! The trailing '/' on the 'src' parameter is significant, do not remove!
# (see the docs: http://docs.ansible.com/ansible/synchronize_module.html)
- name: sync source from local directory
  synchronize:
    dest: "{{ source_dir }}"
    src: "{{ local_project_dir }}/"
    delete: yes
    rsync_path: "sudo rsync"  # Use sudo on the remote system
#    set_remote_user: true
    recursive: true
    rsync_opts:
      - "--exclude=.git"
      - "--exclude=*.pyc"
  become: no  # stops synchronize trying to sudo locally
  when: source_is_local

- name: force proper ownership of source
  file:
    owner: "{{ project_user }}"
    group: "{{ project_user }}"
    path: "{{ source_dir }}"
    recurse: yes

- name: delete pyc files
  shell: find {{ source_dir }} -name '*.pyc' -delete
  become_user: "{{ project_user }}"

- name: pip install the project requirements
  pip: requirements={{ source_dir }}/requirements/{{ requirements_name[env_name]|default('production') }}.txt
       virtualenv={{ venv_dir }}
       virtualenv_python=/usr/bin/python{{ python_version }}
  become_user: "{{ project_user }}"

#- name: set up the project python path
#  copy: content="{{ source_dir }}"
#        dest={{ venv_dir }}/lib/python{{ python_version }}/site-packages/project.pth
#        user={{ project_user }}
#        group={{ project_user }}
#  become_user: "{{ project_user }}"

# THIS needs to come AFTER syncing the source to the server,
# since that might remove files like .env that weren't in the
# source directory locally.
- name: create/update .env file
  template: >
    dest={{ source_dir }}/.env
    owner={{ project_user }}
    group={{ project_user }}
    mode=400
    src=envfile.j2

- name: make manage.py executable (because django_manage expects it)
  file: >
    path={{ source_dir }}/manage.py
    mode=0755
  become_user: "{{ project_user }}"

- name: configure celery and celery beat
  template: src=celery.conf
            dest=/etc/supervisor/conf.d/{{ project_name }}-celery-{{ item.name }}.conf
            owner=root
            group=root
            mode=0600
  with_items:
    - { name: "default", command: "worker", flags: "--loglevel=INFO" }
    - { name: "beat", command: "beat", flags: "--schedule={{ root_dir }}/celerybeat-schedule.db --pidfile={{ root_dir }}/celerybeat.pid --loglevel=INFO" }
  notify:
    - restart celery
    - restart celery-beat

- name: ensure celery is running
  supervisorctl: name={{ project_name }}-celery-default state=started

- name: ensure celery-beat is running
  supervisorctl: name={{ project_name }}-celery-beat state=started

# TODO: find out if the latest gunicorn is ok, or if we really do want
# to pin to a version in the 19.1 series.
- name: install gunicorn
  pip: name=gunicorn
       state=latest
       virtualenv={{ venv_dir }}
       virtualenv_python=/usr/bin/python{{ python_version }}
  become_user: "{{ project_user }}"

- name: configure gunicorn
  template: src=gunicorn.conf
            dest=/etc/supervisor/conf.d/{{ project_name }}-gunicorn.conf
            owner=root
            group=root
            mode=0600
  notify:
    - reload supervisor

- name: ensure gunicorn is running
  supervisorctl: name={{ project_name }}-server state=started

# TODO: let connections to 8000 through the firewall if we are load-balancing.

- name: collectstatic
  django_manage: >
    command=collectstatic
    app_path={{ source_dir }}
    virtualenv={{ venv_dir }}
  become_user: "{{ project_user }}"

- name: migrate
  django_manage: >
    command=migrate
    app_path={{ source_dir }}
    virtualenv={{ venv_dir }}
  become_user: "{{ project_user }}"

- name: copy shell script wrapper for manage.py
  template: src=manage.sh
            dest={{ root_dir }}/manage.sh
            owner={{ project_name }}
            group={{ project_name }}
            mode=700
